========================================================
=========== Circular Light And Mass Profiles ===========
========================================================

All circular light / mass profiles have two geometric parameters, [x_cen, y_cen], which translate their
Catersian coordinates (x,y) to re-centred coordinates (xi, yi):

xi = x-x_cen
yi = y-y_cen

========================================================
========== Elliptical Light And Mass Profiles ==========
========================================================

All elliptical light / mass profiles have four geometric parameters, [x_cen, y_cen, q, phi], which translate their
Catersian coordinates (x,y) to re-centred and rotated coordinates (xi, yi):

# DISTANCE OF COORDINATE FROM CENTRE
r = sqrt((x-x_cen)**2 + (y-y_cen)**2) [Pythagoras, includes the shifts above]

# ANGLE BETWEEN COORDINATE AND +VE X-AXIS
cos_theta=(x-x_cen)/r [BASIC TRIG - COS ADJACENT HYPOTENUSE]
sin_theta=(y-y_cen)/r [BASIC TRIG - SIN OPPOSTE HYPOTENUSE]

# ANGLE BETWEEN LIGHT PROFILE ROTATIONAL ANGLE +VE X-AXIS
phi_radians=phi*3.14158191/180.
cos_phi=dcos(1.d0*phi_radians)
sin_phi=dsin(1.d0*phi_radians)

# PERFORM ROTATION TO ELLIPSE'S ANGLE VIA ROTATION MATRIX
dum=cos_theta
cos_theta=cos_theta*cos_phi+sin_theta*sin_phi
sin_theta=sin_theta*cos_phi-dum*sin_phi

# CONVERT COORDINATES TO ROTATED  COORDINATE SYSTEM
xi = r*costhe
yi = r*sinthe

# FOR LIGHT PROFILES ONLY - TRANSLATE THE ROTATED COORDINATES TO ELLIPTICAL COORDINATES
radius = sqrt(q)*(xi**2 + (xi**2/q**2)) [LIGHT PROFILE ONLY]

# NOTE - FOR DEFLECTION ANGLES, THE AXIS RATIO IS FOLDED INTO THE MASS PROFILE CALCULATION

#FOR DEFLECTION ANGLES - TRANSLATE FROM ELLIPTICAL COORDINATES BACK TO CARTESIAN

dum=defl_xi
defl_x =  (dum*cos_phi-defl_yi*sin_phi)
defl_y = (+dum*sin_phi+defl_yi*cos_phi)

========================================================
=============== Multiple Light Profiles ================
========================================================

If the light model light consists of multiple compoenents (e.g. Sersic + Expoential model), each component's light
profile is computed indepedently and they are then added together.

Light profiles may be specified to use the same centre, axis ratio and / or rotational angle as the previous component
(e.g. x_2 = x_1, phi_2 = phi_1).

========================================================
=============== Multiple Mass Profiles =================
========================================================

If the mass model consists of multiple components (e.g. SIE + PL), each component's deflection angles are
computed indepedantly and they are then added together.

Mass profiles may be specified to use the same centre, axis ratio and / or rotational angle as the previous component
(e.g. x_2 = x_1, phi_2 = phi_1) or any component in the light model (e.g. a dark matter halo may be aligned with
the Sersic component representing a galaxy's bulge, or the EllipticalExponentialMP component representing its disk).

========================================================
============== Decomposed Mass Profiles ================
========================================================

Each light profile can be included in the mass model, using the mass profile (LTM - Light-Traces-Mass). Each
component of the light model is converted to a mass profile via a mass-to-light ratio, which is used to compute
its deflection angles.

There are multiple types of LTM models:

One mass-to-light ratio - all components in the light model share the same mass-to-light ratio.
Multiple mass-to-light ratios - all components in the light model have a different and unique mass-to-light ratio
Radial gradient - Light does not directly trace mass, but has a radial dependence.
One may even include a radial gradient in every light component, each of which has its own unique mass-to-light ratio!

##########################################################
#################### LIGHT PROFILES ######################
##########################################################

============================
========== Sersic ==========
============================

--- Description ---

The Sersic profile is used to fit the light of a galaxy. It can produce both highly concentrated light profiles
(for high Sersic Index) or extended flatter profiles (for low Sersic Index).

--- Geometry ---

Elliptical or Circular

--- ModelMapper Parameters ---

x_cen, y_cen, q, phi

flux = overall flux intensity normalisation in the light profile (electrons per second)
effective_radius = The radius containing half the light of this model
sersic_index = The concentration of the light profile

--- Other Parameters ---

sersic_constant = A parameter, derived from sersic_index, that ensures that effective_radius always contains 50% of the
light.

APPROXIMATION:
sersic_constant = (2*sersic_index) - (1./3.) + (4./(405.*sersic_index)) + (46./(25515.*sersic_index**2)) &
       + (131./(1148175.*sersic_index**3)) - (2194697./(30690717750.*sersic_index**4)))

--- Equation ---

Sersic = flux*exp(-sersic_constant*(((radius/effective_radius)**(1./sersic_index))-1))

--- Notes ---

The Sersic profile can be used to fit all of a galaxies light (Single Sersic), or an individual component (Bulge, Disk,
Stellar Halo). Therefore, we will want classes of Sersic profile (TOTAL, BULGE, DISK, HALO), which change the priors
on parameters like the sersic_index.

============================
======== EllipticalExponentialMP =======
============================

--- Description ---

The EllipticalExponentialMP profile is used to fit flatter regions of light in a galaxy, typically its disks or stellar halo. It is
a subset of the Sersic profile, corresponding exactly to the solution sersic_index = 1.

--- Geometry ---

Elliptical or Circular

--- ModelMapper Parameters ---

x_cen, y_cen, q, phi

flux = overall flux intensity normalisation in the light profile (electrons per second)
effective_radius = The radius containing half the light of this model

--- Other Parameters ---

sersic_index = Fixed to 1.
sersic_constant = A parameter, derived from sersic_index, that ensures that effective_radius always contains 50% of the
light.

APPROXIMATION:
sersic_constant = (2*sersic_index) - (1./3.) + (4./(405.*sersic_index)) + (46./(25515.*sersic_index**2)) &
       + (131./(1148175.*sersic_index**3)) - (2194697./(30690717750.*sersic_index**4)))

--- Equation ---

EllipticalExponentialMP = flux*exp(-1.678388*(((radius/effective_radius)-1))

============================
====== Dev Vaucouleurs =====
============================

--- Description ---

The Dev Vaucouleurs profile is used to fit the concentrated regions of light in a galaxy, typically its bulge. It may
also fit the entire light profile of an elliptical / early-type galaxy. It is a subset of the Sersic profile,
corresponding exactly to the solution sersic_index = 4.

--- Geometry ---

Elliptical or Circular

--- ModelMapper Parameters ---

x_cen, y_cen, q, phi

flux = overall flux intensity normalisation in the light profile (electrons per second)
effective_radius = The radius containing half the light of this model

--- Other Parameters ---

sersic_index = Fixed to 4.
sersic_constant = A parameter, derived from sersic_index, that ensures that effective_radius always contains 50% of the
light.

APPROXIMATION:
sersic_constant = (2*sersic_index) - (1./3.) + (4./(405.*sersic_index)) + (46./(25515.*sersic_index**2)) &
       + (131./(1148175.*sersic_index**3)) - (2194697./(30690717750.*sersic_index**4)))

--- Equation ---

Sersic = flux*exp(-7.66925*(((radius/effective_radius)**(1./4.))-1))

============================
======= Core-Sersic ========
============================

--- Description ---

The Core-Sersic profile is used to fit the light of a galaxy. It is an extension of the Sersic profile and flattens
the light profiles central values (compared to the extrapolation of a pure Sersic profile), by forcing these central
regions to behave instead as a power-law.

It is used to model flattened light 'cores' found in high-mass Early-type galaxies, that result from super-massive
black-hole binary scouring.

--- Geometry ---

Elliptical or Circular

--- ModelMapper Parameters ---

x_cen, y_cen, q, phi

flux = overall flux intensity normalisation in the Sersic light profile (electrons per second)
effective_radius = The radius containing half the light of this model
sersic_index = The concentration of the light profile

flux_prime = overall flux intensity normalisation in the rescaled Core-Sersic light profile (electrons per second)
gamma = The logarithmic power-law slope of the inner core profile
radius_break = The break radius separating the inner power-law (with logarithmic slope gamma) and outer Sersic function.
flux_break = The intensity at the break radius.
alpha = Controls the sharpness of the transition between the inner core / outer Sersic profiles.

--- Other Parameters ---

sersic_constant = A parameter, derived from sersic_index, that ensures that effective_radius always contains 50% of the
light.

APPROXIMATION:
sersic_constant = (2*sersic_index) - (1./3.) + (4./(405.*sersic_index)) + (46./(25515.*sersic_index**2)) &
       + (131./(1148175.*sersic_index**3)) - (2194697./(30690717750.*sersic_index**4)))

--- Equation ---


flux_prime = flux_break*(2.0**(-gamma/alpha))*exp(-sersic_constant*(((2.0**(1.0/alpha))*radius_break)/effective_radius)**(1.0/sersic_index))
Core_Sersic = flux_prime*((1+((radius_break/radius)^alpha))**(gamma/alpha)) * exp(sersic_constant* (( ((radius**alpha) + (radius_break^alpha)) / (effective_radius^alpha) ) ** (1.0/(alpha*sersic_index)) ) )




##########################################################
#################### MASS PROFILES #######################
##########################################################

NOTE - for the SIS, SIE, SPLE, SISCore, SIECore, SPLECore profiles, there is fortran codde which computes these very fast.
I may link our deflection angle calculations to this library rather than explicitly coding up c++ routines. I'm not sure
yet.

For Elliptical mass profiles, we often calculate defl_x and defl_y explicity. For Circular profiles, we calculate
defl_r, and then compute defl_x = defl_r*cos(theta_from_x_axis) and defl_y = defl_r*sin(theta_from_x_axis)

============================
======== Point Mass ========
============================

--- Description ---

The point mass represents a point of mass (duh). It is used to model unresolved sources or black-holes

--- Geometry ---

Circular

--- ModelMapper Parameters ---

x_cen, y_cen, einstein_radius

einstein_radius = The normalization of mass, defined in terms of einstein_radius

--- Equation ---

r = (xi**2 + yi**2)
kappa = ?
defl_r = einstein_radius/r

============================
============ SIS ===========
============================

--- Description ---

The Singular Isothermal Sphere (SIS) profile is used for the total mass of a galaxy. It is a spherical ball of mass.
Whilst we typically won't use this to model a lens galaxy's mass, it is common for smaller and lower mass nearby galaxies
to be included in the lens model as SIS's (often with their centre fixed to their light profile centre).

The SIE model is an elliptical generalization of the SIS model.

The EllipticalPowerLawMP model corresponds to the SIS model for the case of circulatiry
(axis_ratio=1.0) and isothermal (slope=2.0)

--- Geometry ---

Circular

--- ModelMapper Parameters ---

x_cen, y_cen, einstein_radius

einstein_radius = The normalization of mass, defined in terms of einstein_radius
normalization = 0.5

--- Equation ---

r = (xi**2 + yi**2)
normalization = 0.5*einstein_radius  = Rescales the mass distribution to its ellipticity.

kappa = normalization*(u)**(0.5)

defl_r = ? ( There is a simple way to do this, but I've forgot it for now)

Psi = sqrt((x**2) + y**2)

sie_norm = (normalization/sqrt(1-axis_ratio**2))

defl_x = sie_norm*atan((sqrt(1-axis_ratio**2)*xi)/(Psi))
defl_y = sie_norm*atanh((sqrt(1-axis_ratio**2)*yi)/(Psi))

============================
============ SIE ===========
============================

--- Description ---

The Singular Isothermal Ellipsoid (SIE) profile is used for the mass of a galaxy. It is an ellipsoid of mass.

The EllipticalPowerLawMP model corresponds to the SIE model for the case of isothermal (slope=2.0)

--- Geometry ---

Elliptcal

--- ModelMapper Parameters ---

x_cen, y_cen, axis_ratio, phi, einstein_radius

einstein_radius = The normalization of mass, defined in terms of einstein_radius

--- Other Parameters ---

normalization = 1/ (1 + axis_ratio) = Rescales the mass distribution to its ellipticity.

--- Equation ---

u = (xi**2 + yi**2/axis_ratio**2)
kappa = normalization*(u)**(0.5)

Psi = sqrt( (axis_ratio**2)*(xi**2) + yi**2)

normalization = 1/ (1 + axis_ratio)*einstein_radius  = Rescales the mass distribution to its ellipticity.
sie_norm = (normalization*axis_ratio/sqrt(1-axis_ratio**2))

defl_x = sie_norm*atan((sqrt(1-axis_ratio**2)*xi)/(Psi))
defl_y = sie_norm*atanh((sqrt(1-axis_ratio**2)*yi)/(Psi))

The calculations above are equivalent to numerically inegration the kappa function. However, unlike the power-law profiles
below, the solution (slope=2) means that we can get the deflection angles analytically as above.

============================
========== SIECore =========
============================

--- Description ---

The Cored Singular Isothermal Ellipsoid (SIE) profile is used for the mass of a galaxy.It is identical to the SIE above,
but includes an additional parameter which makes the central density go from a core (instead of rising steeply as a
power-law)

The EllipticalCoredPowerLawMP model corresponds to the SIECore model for the case of isothermal (slope=2.0)

--- Geometry ---

Elliptcal

--- ModelMapper Parameters ---

x_cen, y_cen, axis_ratio, phi, einstein_radius, core_radius

einstein_radius = The normalization of mass, defined in terms of einstein_radius
core_radius = The size of the core (arcseconds)

--- Other Parameters ---

normalization = 1/ (1 + axis_ratio)*einstein_radius  = Rescales the mass distribution to its ellipticity.

--- Equation ---

u = (xi**2 + yi**2/axis_ratio**2)
kappa = normalization*(u+core_radius**2)**(0.5)

Psi = sqrt( (axis_ratio**2)*(core_radius**2 + xi**2) + yi**2)
sie_norm = (normalization*axis_ratio/sqrt(1-axis_ratio**2))

defl_x = sie_norm*atan((sqrt(1-axis_ratio**2)*xi)/(Psi + core_radius))
defl_y = sie_norm*atanh((sqrt(1-axis_ratio**2)*yi)/(Psi + ((axis_ratio**2)*(core_radius))))

The calculations above are equivalent to numerically inegration the kappa function. However, unlike the power-law profiles
below, the solution (slope=2) means that we can get the deflection angles analytically as above.

==================================================
============ SPLE (EllipticalPowerLawMP) ===========
==================================================

--- Description ---

The Softened Power-Law Ellipsoid (SPLE) profile is used for the mass of a galaxy. It is an ellipsoid of mass.
In contrast to the SIS and SIE, the slope is a free parameter and can thus vary from isothermality (slope=2.0)

--- Geometry ---

Elliptical

--- ModelMapper Parameters ---

x_cen, y_cen, axis_ratio, phi, einstein_radius, slope

einstein_radius = The normalization of mass, defined in terms of einstein_radius

--- Other Parameters ---

normalization = (3 - slope) / (1 + axis_ratio)*einstein_radius  = Rescales the mass distribution to its density and ellipticity.

--- Equation ---

u = (xi**2 + yi**2/axis_ratio**2)
kappa = normalization*(u+core_radius**2)**((slope-1.0)/2.0)
defl - perform numerical integral of kappa over ellipticity (Keeton 2003)

===================================
============= SPLECore ============
===================================

--- Description ---

The Cored Softened Power-Law Ellipsoid (SPLE) profile is used for the mass of a galaxy. It is identical to the SPLE above,
but includes an additional parameter which makes the central density go from a core (instead of rising steeply as a
power-law)

--- Geometry ---

Circular or Elliptical

--- ModelMapper Parameters ---

x_cen, y_cen, axis_ratio, phi, einstein_radius, slope, core_radius

einstein_radius = The normalization of mass, defined in terms of einstein_radius
core_radius = The size of the core (arcseconds)

--- Other Parameters ---

normalization = ((3 - slope) / (1 + axis_ratio))*einstein_radius = Rescales the mass distribution to its density and ellipticity.

--- Equation ---

u = (xi**2 + yi**2/axis_ratio**2)
kappa = normalization*(u+core_radius**2)**((slope-1.0)/2.0)
defl - perform numerical integral of kappa over ellipticity (Keeton 2003)

===================================
========== NFW Spherical ==========
===================================

--- Description ---

The Navarro-Frenk-White (NFW) profile is used for modeling a galaxy's dark matter halo.

--- Geometry ---

Circular

--- ModelMapper Parameters ---

x_cen, y_cen, kappa_s

kappa_s = The normalization of mass, defined in terms of a 'halo mass'

--- Other Parameters ---

inner_slope = 1 = NFW is the solution where the inner_slope is 1
scale_radius = 50 kilo-parsecs = the outer scale radius of the halo. Could be a free parameter, but typically fix large.

--- Equation ---

r = (1/scale_radius)*(xi**2 + yi**2)

if r > 1:
   Fx = (1./(sqrt((r**2)-1)))*atan(sqrt((r**2)-1))
elifr < 1:
   Fx = (1./(sqrt(1-(r**2))))*atanh(sqrt(1-(r**2)))
elif r == 1:
   Fx = 1.

kappa = 2*kappa_s*((1-Fx)/(r**2-1))
defl_r = 4*kappa_s_Arc*scale_radius*((log(r/2.0)+Fx)/r)

NOTE : YOu could numerically integrate kappa for defl_r, but analytic solution faster

===================================
========== NFW Elliptical =========
===================================

--- Description ---

The Navarro-Frenk-White (NFW) profile is used for modeling a galaxy's dark matter halo.

--- Geometry ---

Elliptical

--- ModelMapper Parameters ---

x_cen, y_cen, axis_ratio, phi, kappa_s

kappa_s = The normalization of mass, defined in terms of a 'halo mass'

--- Other Parameters ---

inner_slope = 1 = NFW is the solution where the inner_slope is 1
scale_radius = 50 kilo-parsecs = the outer scale radius of the halo. Could be a free parameter, but typically fix large.
normalization =  2*kappa_s*axis_ratio

--- Equation ---

NOTE: Using Fx defined above.

r = (1/scale_radius)*(xi**2 + (yi**2)/(axis_ratio**2))
kappa = 2*kappa_s*((1-Fx)/(r**2-1))

defl_x = normalization*xi*scipy.integrate(eta, NFWIntegral(npow=0), range=0,1) [SCIPY syntax is guessing a bit...]
defl_y = normalization*yi*scipy.integrate(eta, NFWIntegral(npow=1), range=0,1)

integrate over small steps of u from 0 to 1:
def NFWIntegral(self, npow):
    eta = (1.0/scale_radius)*(u*((xi*2) + (yi**2/(1-(1-axis_ratio**2)*u))))**0.5
    nfw_integral = ((1-Fx)/((eta**2)-1))/((1-(1-axis_ratio**2)*u)**(npow+0.5))

===============================================
========== generalized NFW Spherical ==========
===============================================

--- Description ---

The generlized Navarro-Frenk-White (gNFW) profile is used for modeling a galaxy's dark matter halo and includes
an extra parameter which makes its inner slope variable.

--- Geometry ---

Circular

--- ModelMapper Parameters ---

x_cen, y_cen, kappa_s, inner_slope

kappa_s = The normalization of mass, defined in terms of a 'halo mass'
inner_slope = 1 = NFW is the solution where the inner_slope is 1

--- Other Parameters ---

scale_radius = 50 kilo-parsecs = the outer scale radius of the halo. Could be a free parameter, but typically fix large.

--- Equation ---

r = (1/scale_radius)*(xi**2 + yi**2)
kappa = 2*kappa_s*r**(1-inner_slope)*[((1+r)**(inner_slope-3))*integral_over_z]
integral_over_z = scipy.integrate(z, NFWIntegral(npow=1), range=0,1)

def int_z(self, z):
    int_z = ((z+r)**(inner_slope-3))*((1.0-sqrt(1.0-z**2))/z)

The deflection angles are an even bigger mess of integrals... lets not think about that for now

===============================================
========== generalized NFW Elliptical ==========
===============================================

Ssame as above but elliptical - even bigger mess of a deflection angle calculation...

=============================================================
========== Sersic (and EllipticalExponentialMP / Dev Vaucoulers =========
=============================================================

--- Description ---

For the Sersic light profiles we fit to galaxies, need to have a corresponding mass profile to compute their deflection
angles.

--- Geometry ---

Elliptical

--- ModelMapper Parameters ---

x_cen, y_cen, q, phi, flux, effective_radius, index [Inherited from light model]

mass_to_light = mass to light ratio controlling mass normalization
radial_gradient (optionoal, if off set to zero) = deviate from light traces mass

--- Equation ---

xi = sqrt(axis_ratio)*(xi**2 + (yi**2)/(axis_ratio**2))

normalization = flux*axis_ratio*mass_to_light*((eta/effective_radius)**radial_gradient)
kappa = normalization*exp(-1*sersic_constant*(eta/effective_radius)**(1/sersic_index))-1)

deflections are found by integrating kappa over xi from 0 to 1:

defl_x = normalization*xi*scipy.integrate(eta, SersicIntegral(npow=0), range=0,1) [SCIPY syntax is guessing a bit...]
defl_y = normalization*yi*scipy.integrate(eta, SersicIntegral(npow=1), range=0,1)

def SersicIntegral(self, npow):
    eta = sqrt(axis_ratio)*(u*((xi*2) + (yi**2/(1-(1-axis_ratio**2)*u))))**0.5
    normalization = flux*axis_ratio*mass_to_light*((eta/effective_radius)**radial_gradient)
    sersic_integral = normalization*exp(-1*sersic_constant*(eta/effective_radius)**(1/sersic_index))-1)/((1-(1-axis_ratio**2)*u)**(npow+0.5))

=============================================================
======================== Light Traces Mass =================
=============================================================

In my FORTRAN code, I had a LTM model which describes how you would approach modeling multiple light components (e.g. x2 Sersic).
There are four LTM models:

LTM - Both light profiles (e.g. Sersics) have one, shared, mass-to-light ratio and the radial gradient is off (=0)
LTM2 - Both light profiles have indepedent mass-to-light ratios and the radial gradient is off (=0)
LTM_R - Both light profiles (e.g. Sersics) have one, shared, mass-to-light ratio and the radial gradient is a free parameter, for just the bulge component
LTM2_ - Both light profiles have indepedent mass-to-light ratios and the radial gradient is a free parameter, for each component

It will probably be easieer if we do away with LTM altogether and store in each Sersic mass component whether its
mass-to-light ratio / radial_gradient are free, fixed or inherited from elsewhere.
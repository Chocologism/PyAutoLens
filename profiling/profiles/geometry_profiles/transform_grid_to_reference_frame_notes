geometry_profile.transform_grid_to_reference_frame:

sub-grid size = 2 (4 sub-pixels)

lsst_original_solution: 0.0008046627044677734
lsst_jit_solution: 0.12452912330627441

euclid_original_solution: 0.002318143844604492
euclid_jit_solution: 0.138397216796875

hst_original_solution: 0.008767366409301758
hst_jit_solution: 0.13720965385437012

hst_up_original_solution: 0.024799108505249023
hst_up_jit_solution: 0.14036321640014648

ao_original_solution: 0.2089083194732666
ao_jit_solution: 0.3275113105773926

sub-grid size = 4 (16 sub-pixels)

lsst_original_solution: 0.0037941932678222656
lsst_jit_solution: 0.16167879104614258

euclid_original_solution: 0.009343862533569336
euclid_jit_solution: 0.12668228149414062

hst_original_solution: 0.03707242012023926
hst_jit_solution: 0.1395552158355713

hst_up_original_solution: 0.12219643592834473
hst_up_jit_solution: 0.21689200401306152

ao_original_solution: 1.1824085712432861
ao_jit_solution: 0.8663289546966553


The non-jitted numpy array works better for every case, except the extreme AO case. However, the run-times of the AO
case are not manageable regardless, considering we call this function for every profile. Even the hst_up run-times are
problematic for a large number of galaxies / profiles.


It is important to remember that we can significantly reduce the calls to this function for both light and
mass profiles by:

light-profiles and mass-profiles - Setup an adaptive sub-pixel grid, with the majority of pixels (away from the centre)
having just 1 central sub-pixel.

mass-profiles - Use the interpolation defleciton angle grid (provided the interpolation itself isn't super slow...)


A non-ideal speed-up nwould be to move the coordinate transforms into the jitted light profile intensity / mass profile
deflection calculations.


Can the jitted function I've written be sped up anymore? Im not sure how but one to revist maybe.